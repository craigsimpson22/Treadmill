name: Build Interval Runner APK (phone-only, one file)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Create Android project files
        run: |
          set -e
          mkdir -p IntervalRunner/app/src/main/java/com/craig/intervalrunner
          mkdir -p IntervalRunner/app/src/main/res/values

          cat > IntervalRunner/settings.gradle.kts << 'EOF'
          pluginManagement {
              repositories { gradlePluginPortal(); google(); mavenCentral() }
          }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories { google(); mavenCentral() }
          }
          rootProject.name = "IntervalRunner"
          include(":app")
          EOF

          cat > IntervalRunner/build.gradle.kts << 'EOF'
          plugins {
              id("com.android.application") version "8.5.0" apply false
              kotlin("android") version "1.9.24" apply false
          }
          EOF

          cat > IntervalRunner/gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          kotlin.code.style=official
          android.nonTransitiveRClass=true
          EOF

          cat > IntervalRunner/app/build.gradle.kts << 'EOF'
          plugins {
              id("com.android.application")
              kotlin("android")
          }

          android {
              namespace = "com.craig.intervalrunner"
              compileSdk = 35

              defaultConfig {
                  applicationId = "com.craig.intervalrunner"
                  minSdk = 26
                  targetSdk = 35
                  versionCode = 1
                  versionName = "1.0.0"
                  testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
              }

              buildTypes {
                  release {
                      isMinifyEnabled = false
                      proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
                  }
                  debug {
                      isMinifyEnabled = false
                  }
              }

              buildFeatures { compose = true }
              composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }

              packaging { resources { excludes += "/META-INF/{AL2.0,LGPL2.1}" } }
          }

          dependencies {
              val composeBom = platform("androidx.compose:compose-bom:2024.06.00")
              implementation(composeBom)
              androidTestImplementation(composeBom)

              // Material library needed for the theme
              implementation("com.google.android.material:material:1.12.0")

              implementation("androidx.core:core-ktx:1.13.1")
              implementation("androidx.activity:activity-compose:1.9.0")
              implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.2")
              implementation("androidx.lifecycle:lifecycle-runtime-compose:2.8.2")
              implementation("androidx.compose.ui:ui")
              implementation("androidx.compose.material3:material3")
              implementation("androidx.compose.ui:ui-tooling-preview")
              debugImplementation("androidx.compose.ui:ui-tooling")

              testImplementation("junit:junit:4.13.2")
              androidTestImplementation("androidx.test.ext:junit:1.2.1")
              androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
              androidTestImplementation("androidx.compose.ui:ui-test-junit4")
          }
          EOF

          cat > IntervalRunner/app/proguard-rules.pro << 'EOF'
          # No special rules required
          EOF

          cat > IntervalRunner/app/src/main/AndroidManifest.xml << 'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.craig.intervalrunner">

              <uses-permission android:name="android.permission.VIBRATE" />
              <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />

              <application
                  android:allowBackup="true"
                  android:icon="@android:drawable/ic_dialog_info"
                  android:label="@string/app_name"
                  android:theme="@style/Theme.IntervalRunner">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:screenOrientation="portrait">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          cat > IntervalRunner/app/src/main/res/values/themes.xml << 'EOF'
          <resources xmlns:tools="http://schemas.android.com/tools">
              <style name="Theme.IntervalRunner" parent="Theme.Material3.DayNight.NoActionBar">
                  <item name="android:statusBarColor">@android:color/transparent</item>
                  <item name="android:navigationBarColor">@android:color/black</item>
              </style>
          </resources>
          EOF

          cat > IntervalRunner/app/src/main/res/values/strings.xml << 'EOF'
          <resources>
              <string name="app_name">Interval Runner</string>
          </resources>
          EOF

          cat > IntervalRunner/app/src/main/java/com/craig/intervalrunner/MainActivity.kt << 'EOF'
          package com.craig.intervalrunner

          import android.media.AudioManager
          import android.media.ToneGenerator
          import android.os.Bundle
          import android.os.VibrationEffect
          import android.os.Vibrator
          import android.speech.tts.TextToSpeech
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.activity.enableEdgeToEdge
          import androidx.compose.foundation.background
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyRow
          import androidx.compose.foundation.lazy.itemsIndexed
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Alignment
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.graphics.Color
          import androidx.compose.ui.text.font.FontWeight
          import androidx.compose.ui.text.style.TextAlign
          import androidx.compose.ui.unit.dp
          import androidx.core.view.WindowCompat
          import kotlinx.coroutines.delay
          import java.util.Locale
          import kotlin.math.max
          import kotlin.math.min

          data class Segment(val kind: Kind, val lengthSec: Int) {
              enum class Kind { FAST, SLOW }
          }

          @OptIn(ExperimentalMaterial3Api::class)
          class MainActivity : ComponentActivity() {
              private var tts: TextToSpeech? = null
              private var tone: ToneGenerator? = null

              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  enableEdgeToEdge()
                  WindowCompat.getWindow(this)
                      .addFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

                  tts = TextToSpeech(this) { status ->
                      if (status == TextToSpeech.SUCCESS) {
                          tts?.language = Locale.UK
                          tts?.setSpeechRate(1.0f)
                      }
                  }
                  tone = ToneGenerator(AudioManager.STREAM_MUSIC, 80)

                  setContent {
                      MaterialTheme(colorScheme = darkColorScheme()) {
                          IntervalApp(
                              speak = { text -> speak(text) },
                              beep = { fast -> beep(fast) },
                              vibrate = { pattern -> vibrate(pattern) }
                          )
                      }
                  }
              }

              private fun speak(text: String) {
                  try { tts?.speak(text, TextToSpeech.QUEUE_FLUSH, null, "utt") } catch (_: Throwable) {}
              }

              private fun beep(fast: Boolean) {
                  try {
                      val tg = tone ?: return
                      val toneType = if (fast) ToneGenerator.TONE_SUP_RADIO_ACK
                                     else ToneGenerator.TONE_PROP_BEEP
                      tg.startTone(toneType, 250)
                  } catch (_: Throwable) {}
              }

              private fun vibrate(pattern: LongArray) {
                  val vib = getSystemService(VIBRATOR_SERVICE) as Vibrator
                  try {
                      if (android.os.Build.VERSION.SDK_INT >= 26) {
                          vib.vibrate(VibrationEffect.createWaveform(pattern, -1))
                      } else {
                          @Suppress("DEPRECATION") vib.vibrate(pattern, -1)
                      }
                  } catch (_: Throwable) {}
              }

              override fun onDestroy() {
                  super.onDestroy()
                  tts?.stop(); tts?.shutdown(); tone?.release()
              }
          }

          @Composable
          fun IntervalApp(
              speak: (String) -> Unit,
              beep: (Boolean) -> Unit,
              vibrate: (LongArray) -> Unit
          ) {
              var fastMin by remember { mutableStateOf(3) }
              var slowMin by remember { mutableStateOf(3) }
              var cycles by remember { mutableStateOf(5) }
              var prepSec by remember { mutableStateOf(5) }

              val segments = remember(fastMin, slowMin, cycles) {
                  buildList {
                      repeat(cycles) {
                          add(Segment(Segment.Kind.FAST, fastMin * 60))
                          add(Segment(Segment.Kind.SLOW, slowMin * 60))
                      }
                  }
              }
              val totalSec = segments.sumOf { it.lengthSec }
              var currentIndex by remember { mutableStateOf(-1) } // -1 = prep
              var secLeft by remember { mutableStateOf(prepSec) }
              var running by remember { mutableStateOf(false) }
              var finished by remember { mutableStateOf(false) }

              LaunchedEffect(currentIndex) {
                  if (currentIndex >= 0 && currentIndex < segments.size) {
                      val seg = segments[currentIndex]
                      beep(seg.kind == Segment.Kind.FAST)
                      vibrate(longArrayOf(100, 50, 100))
                      speak(if (seg.kind == Segment.Kind.FAST) "Fast pace" else "Slow pace")
                  }
              }

              LaunchedEffect(running, secLeft, currentIndex, segments) {
                  while (running) {
                      delay(1000)
                      secLeft -= 1
                      if (currentIndex == -1 && secLeft <= 0) {
                          currentIndex = 0
                          secLeft = segments.getOrNull(0)?.lengthSec ?: 0
                      } else if (currentIndex >= 0 && secLeft <= 0) {
                          val next = currentIndex + 1
                          if (next < segments.size) {
                              currentIndex = next
                              secLeft = segments[next].lengthSec
                          } else {
                              running = false
                              finished = true
                              beep(true); delay(220); beep(true); delay(220); beep(false)
                              vibrate(longArrayOf(200,100,200,100,200))
                              speak("Workout complete")
                          }
                      }
                  }
              }

              LaunchedEffect(fastMin, slowMin, cycles, prepSec) {
                  if (!running) {
                      currentIndex = -1
                      secLeft = prepSec
                      finished = false
                  }
              }

              val elapsedSec = when {
                  currentIndex < 0 -> 0
                  currentIndex >= segments.size -> totalSec
                  else -> {
                      val past = segments.take(currentIndex).sumOf { it.lengthSec }
                      val nowLen = segments.getOrNull(currentIndex)?.lengthSec ?: 0
                      past + (nowLen - secLeft)
                  }
              }
              val pct = if (totalSec == 0) 0 else min(100, max(0, (elapsedSec * 100) / totalSec))
              val currentKind = when {
                  currentIndex == -1 -> "PREP"
                  currentIndex >= segments.size -> "DONE"
                  else -> segments[currentIndex].kind.name
              }

              Surface(
                  modifier = Modifier
                      .fillMaxSize()
                      .background(Color(0xFF0B0B0E))
                      .padding(16.dp)
              ) {
                  Column(
                      horizontalAlignment = Alignment.CenterHorizontally,
                      verticalArrangement = Arrangement.Top,
                      modifier = Modifier.fillMaxSize()
                  ) {
                      Text(
                          "Interval Runner",
                          style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.ExtraBold)
                      )
                      Spacer(Modifier.height(6.dp))
                      Text(
                          "5× 3′ fast + 3′ slow (customisable). Voice + beeps at each change.",
                          color = Color(0xFF9EA3AF),
                          style = MaterialTheme.typography.bodyMedium,
                          textAlign = TextAlign.Center
                      )

                      Spacer(Modifier.height(12.dp))
                      Row(horizontalArrangement = Arrangement.spacedBy(8.dp), modifier = Modifier.fillMaxWidth()) {
                          NumberField("Fast (min)", fastMin) { fastMin = it.coerceIn(1, 60) }
                          NumberField("Slow (min)", slowMin) { slowMin = it.coerceIn(1, 60) }
                          NumberField("Cycles", cycles) { cycles = it.coerceIn(1, 30) }
                          NumberField("Prep (sec)", prepSec) { prepSec = it.coerceIn(0, 30) }
                      }

                      Spacer(Modifier.height(16.dp))
                      Card {
                          Column(Modifier.padding(16.dp)) {
                              Row(
                                  Modifier.fillMaxWidth(),
                                  horizontalArrangement = Arrangement.SpaceBetween,
                                  verticalAlignment = Alignment.CenterVertically
                              ) {
                                  Text("Status", color = Color(0xFF9EA3AF))
                                  val badgeColor = when (currentKind) {
                                      "FAST" -> Color(0xFF34D399)
                                      "SLOW" -> Color(0xFF60A5FA)
                                      "PREP" -> Color(0xFFF59E0B)
                                      else -> Color(0xFFA78BFA)
                                  }
                                  AssistChip(
                                      onClick = {},
                                      label = { Text(currentKind) },
                                      colors = AssistChipDefaults.assistChipColors(
                                          labelColor = Color.Black,
                                          containerColor = badgeColor
                                      )
                                  )
                              }
                              Spacer(Modifier.height(8.dp))
                              Text(
                                  mmss(secLeft),
                                  style = MaterialTheme.typography.displayLarge.copy(fontWeight = FontWeight.Black)
                              )
                              Spacer(Modifier.height(4.dp))
                              Text(
                                  when (currentKind) {
                                      "FAST" -> "Fast pace — brisk walk."
                                      "SLOW" -> "Slow pace — recovery walk."
                                      "PREP" -> "Get ready…"
                                      else -> "All done!"
                                  },
                                  color = Color(0xFF9EA3AF)
                              )
                              Spacer(Modifier.height(12.dp))
                              LinearProgressIndicator(
                                  progress = pct / 100f,
                                  modifier = Modifier.fillMaxWidth().height(10.dp)
                              )
                              Spacer(Modifier.height(4.dp))
                              Text("$pct%", textAlign = TextAlign.End, modifier = Modifier.fillMaxWidth(), color = Color(0xFF9EA3AF))
                          }
                      }

                      Spacer(Modifier.height(12.dp))
                      Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                          if (!running) {
                              Button(onClick = { beep(true); running = true }) {
                                  Text(if (currentIndex == -1) "Start" else if (finished) "Restart" else "Resume")
                              }
                          } else {
                              OutlinedButton(onClick = { running = false }) { Text("Pause") }
                          }
                          OutlinedButton(onClick = {
                              running = false; currentIndex = -1; secLeft = prepSec; finished = false
                          }) { Text("Reset") }
                      }

                      Spacer(Modifier.height(12.dp))
                      LazyRow(horizontalArrangement = Arrangement.spacedBy(8.dp), modifier = Modifier.fillMaxWidth()) {
                          itemsIndexed(segments) { idx, seg ->
                              val bg = if (seg.kind == Segment.Kind.FAST) Color(0x2234D399) else Color(0x2260A5FA)
                              Card(colors = CardDefaults.cardColors(containerColor = bg)) {
                                  Column(Modifier.padding(12.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                                      Text(seg.kind.name, fontWeight = FontWeight.SemiBold)
                                      Text(mmss(seg.lengthSec), color = Color(0xFF9EA3AF))
                                      Text("#${idx + 1}", color = Color(0xFF6B7280))
                                  }
                              }
                          }
                      }

                      Spacer(Modifier.height(12.dp))
                      Text(
                          "Tip: Keep the screen on and volume up. Disable battery saver for best timing accuracy.",
                          color = Color(0xFF6B7280),
                          style = MaterialTheme.typography.labelSmall
                      )
                  }
              }
          }

          @Composable
          private fun NumberField(label: String, value: Int, onChange: (Int) -> Unit) {
              var text by remember(value) { mutableStateOf(value.toString()) }
              OutlinedTextField(
                  value = text,
                  onValueChange = {
                      text = it.filter { ch -> ch.isDigit() }.take(3)
                      text.toIntOrNull()?.let(onChange)
                  },
                  label = { Text(label) },
                  singleLine = true,
                  modifier = Modifier.width(0.dp).weight(1f)
              )
          }

          private fun mmss(s: Int): String {
              val m = (s / 60).coerceAtLeast(0)
              val ss = (s % 60).coerceAtLeast(0)
              return "%02d:%02d".format(m, ss)
          }
          EOF

      - name: Ensure Gradle wrapper and build
        working-directory: IntervalRunner
        run: |
          if [ ! -f ./gradlew ]; then
            gradle wrapper --gradle-version 8.7
          fi
          chmod +x gradlew
          ./gradlew --no-daemon assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: IntervalRunner-debug-apk
          path: IntervalRunner/app/build/outputs/apk/debug/app-debug.apk
